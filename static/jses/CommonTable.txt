/*
*
* CommonForm dead.
*
* Now is CommonTable.	version0.1
* 
* Usage:
*
	t = new CommonTable(data,true);
	t.init(containerId,thead_desc);
	//pageNav
	if(t.isPageNav)
		t.pageShow(20,100);//limit==20,total==100
	else
		t.fullShow();
*	
*
*/
function CommonTable(data,isPageNav){//need data is 'CSV' format.
	this.data = data;
	this.table = null;//Dom Node.
	this.tbody = null;
	this.thead_desc = null;
	this.isPageNav = isPageNav||false;
}
CommonTable.prototype = {
	setTableHead:function(thead_desc){
		if(thead_desc instanceof Array != true){
			alert('thead argument is invalid.');
			return;
		}
		else{
			this.thead_desc = thead_desc;
		}
	},
	init : function(containerId,thead_desc){//thead is 'field1,field2...'(string)
		container = document.getElementById(containerId);
		this.setTableHead(thead_desc);
		if(!container || !this.thead_desc)return false;
		//setup thead.
		this.table = document.createElement('TABLE');
		this.table.border="1";
		thead = document.createElement('THEAD');
		thead.innerHTML = '<thead><tr><th>' + this.thead_desc.join('</th><th>') + '</th></tr></thead>';
		this.table.appendChild(thead);	
		this.tbody = document.createElement('TBODY');
		this.table.appendChild(this.tbody);

		//append in DOM tree.
		container.appendChild(this.table);
		return true;
	},
	_show:function(start,end){//need data is 'CSV' format.
		this.tbody.innerHTML = '';
		for(var i=start;i<end;i++){
			if(i<0 || i>this.data.length)break;
			this.tbody.innerHTML += '<tr><td>' + this.data[i].split(',').join('</td><td>') + '</td></tr>';  
		}	
	},
	fullShow:function(){
		this._show(0,data.length);	
	},	
	pageShow:function(LIMIT,TOTAL){
		var CURRENT = 0;
		var nextButton = document.createElement('BUTTON');
		nextButton.appendChild(document.createTextNode('Next'));
		var previousButton = document.createElement('BUTTON');
		previousButton.appendChild(document.createTextNode('Previous'));
		this.table.parentNode.appendChild(previousButton);
		this.table.parentNode.appendChild(nextButton);
		DOMhelp.addEvent(previousButton,'click',slide,false);
		DOMhelp.addEvent(nextButton,'click',slide,false);
		this._show(0,LIMIT);
		var thisInstance = this;
		function slide(e){
			var theButton = DOMhelp.getTarget(e);
			var anotherButton;	
			if(theButton.textContent==='Next'){
				//get another button:previous.
				anotherButton = theButton.previousElementSibling;
				if(CURRENT>=TOTAL-2*LIMIT){
					theButton.style.backgroundColor='grey';
				}else{
					thisInstance._show(CURRENT+LIMIT,CURRENT+ 2*LIMIT);				
					CURRENT+=LIMIT;
				}
				if(CURRENT>2*LIMIT)
					anotherButton.style.backgroundColor='white';
			}else if(theButton.textContent==='Previous'){
				//get closestSibling(next button)
				anotherButton = theButton.nextElementSibling;
				if(CURRENT>=2*LIMIT){
					if(CURRENT==LIMIT)
						theButton.style.backgroundColor='grey';
					thisInstance._show(CURRENT-2*LIMIT,CURRENT-LIMIT);
					CURRENT-=LIMIT;
				}else{
					theButton.style.backgroundColor='grey';
				}
				if(CURRENT<TOTAL-2*LIMIT)
					anotherButton.style.backgroundColor='white';
			}else{
				alert('invalid argument.');
			}
		}//end of innerFunc --- slide()
	}
};//prototype end
